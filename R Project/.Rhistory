lm_model <- lm(model, data = sf)
summary(lm_model)
# Import final dataset
sf <- final_joined_data
# Set regression model formula
model <- BrwnFlds_500 ~ insur_rate + medn_incm + educ_rate + PoC + EJStress
# Replace NAs in income with 0s
sf <- sf %>% mutate(medn_incm = replace_na(medn_incm, 0))
# Import final dataset
sf <- final_joined_data
# Set regression model formula
model <- BrwnFlds_500 ~ insur_rate + medn_incm + educ_rate + PoC + EJStress
# Replace NAs in income with 0s
sf <- sf %>% mutate(medn_incm = replace_na(medn_incm, 0))
# Project dataset in NAD 83 UTM Zone 18N (units are in meters)
sf <- st_transform(sf, 26918)
# Load necessary libraries
library(spdep)
library(sf)
library(spatialreg)
### SET UP
# Import final dataset
sf <- final_joined_data
# Set regression model formula
model <- BrwnFlds_500 ~ insur_rate + medn_incm + educ_rate + PoC + EJStress
# Project dataset in NAD 83 UTM Zone 18N (units are in meters)
sf <- st_transform(sf, 26918)
# Replace NAs in income with 0s
sf <- sf %>% mutate(medn_incm = replace_na(medn_incm, 0))
#sf <- sf %>% filter(!is.na(medn_incm))
# Get centroid coordinates
coords <- st_centroid(sf) %>% st_coordinates()
# # Fixed Distance Bands
# nb <- dnearneigh(coords, d1 = 0, d2 = 2000)  # Set d2 to a distance that covers gaps
# weights <- nb2listw(nb, style = "W")
#
# K-Nearest Neighbors
nb <- knn2nb(knearneigh(coords, k = 4))  # Adjust k for the number of neighbors
weights <- nb2listw(nb, style = "W")
#  Moran's I to test for spatial autocorrelation
moran.test(sf$BrwnFlds_500, weights)
moran.plot(sf$BrwnFlds_500,
listw=weights,
xlab = 'X',
ylab = 'Y')
# Standard OLS Model
lm_model <- lm(model, data = sf)
summary(lm_model)
# Plot
plot(sf$BrwnFlds_500, sf$insur_rate)
plot(sf$BrwnFlds_500, sf$medn_incm)
plot(sf$BrwnFlds_500, sf$educ_rate)
plot(sf$BrwnFlds_500, sf$PoC)
plot(sf$BrwnFlds_500, sf$EJStress)
# MAKE SELECTION HERE, ON OR OFF !! Filter out BGs with zero brownfields
sf <- sf %>% filter(BrwnFlds_500 > 0)
# Plot
plot(sf$BrwnFlds_500, sf$insur_rate)
plot(sf$BrwnFlds_500, sf$medn_incm)
plot(sf$BrwnFlds_500, sf$educ_rate)
plot(sf$BrwnFlds_500, sf$PoC)
# Plot
scatter.smooth(sf$BrwnFlds_500, sf$insur_rate)
scatter.smooth(sf$BrwnFlds_500, sf$medn_incm)
scatter.smooth(sf$BrwnFlds_500, sf$educ_rate)
scatter.smooth(sf$BrwnFlds_500, sf$PoC)
scatter.smooth(sf$BrwnFlds_500, sf$EJStress)
# Check Linearity
scatter.smooth(sf$BrwnFlds_500 ~ sf$insur_rate)
scatter.smooth(sf$BrwnFlds_500 ~ sf$medn_incm)
scatter.smooth(sf$BrwnFlds_500 ~ sf$educ_rate)
scatter.smooth(sf$BrwnFlds_500 ~ sf$PoC)
scatter.smooth(sf$BrwnFlds_500 ~ sf$EJStress)
scatter.smooth(sf$BrwnFlds_500, sf$EJStress)
# Check Linearity
scatter.smooth(sf$BrwnFlds_500 ~ sf$insur_rate)
scatter.smooth(sf$BrwnFlds_500 ~ sf$medn_incm)
scatter.smooth(sf$BrwnFlds_500 ~ sf$educ_rate)
scatter.smooth(sf$BrwnFlds_500 ~ sf$PoC)
scatter.smooth(sf$BrwnFlds_500 ~ sf$EJStress)
# Import final dataset
sf <- final_joined_data
# Set regression model formula
model <- BrwnFlds_500 ~ insur_rate + medn_incm + educ_rate + PoC + EJStress
# Project dataset in NAD 83 UTM Zone 18N (units are in meters)
sf <- st_transform(sf, 26918)
# Replace NAs in income with 0s
sf <- sf %>% mutate(medn_incm = replace_na(medn_incm, 0))
# MAKE SELECTION HERE, ON OR OFF !! Filter out BGs with zero brownfields
sf <- sf %>% filter(BrwnFlds_500 > 0)
# Get centroid coordinates
coords <- st_centroid(sf) %>% st_coordinates()
# # Queen contiguity (neighbors sharing a border or vertex)
nb <- poly2nb(sf)
weights <- nb2listw(nb, style = "W") # Row standardized
#  Moran's I to test for spatial autocorrelation
moran.test(sf$BrwnFlds_500, weights)
# Import final dataset
sf <- final_joined_data
# Set regression model formula
model <- BrwnFlds_500 ~ insur_rate + medn_incm + educ_rate + PoC + EJStress
# Project dataset in NAD 83 UTM Zone 18N (units are in meters)
sf <- st_transform(sf, 26918)
# Replace NAs in income with 0s
sf <- sf %>% mutate(medn_incm = replace_na(medn_incm, 0))
# MAKE SELECTION HERE, ON OR OFF !! Filter out BGs with zero brownfields
sf <- sf %>% filter(BrwnFlds_500 > 0)
# Get centroid coordinates
coords <- st_centroid(sf) %>% st_coordinates()
# # Queen contiguity (neighbors sharing a border or vertex)
nb <- poly2nb(sf)
weights <- nb2listw(nb, style = "W") # Row standardized
#  Moran's I to test for spatial autocorrelation
moran.test(sf$BrwnFlds_500, weights)
moran.plot(sf$BrwnFlds_500,
listw=weights,
xlab = 'X',
ylab = 'Y')
# Check Linearity
scatter.smooth(sf$BrwnFlds_500 ~ sf$insur_rate)
scatter.smooth(sf$BrwnFlds_500 ~ sf$medn_incm)
scatter.smooth(sf$BrwnFlds_500 ~ sf$educ_rate)
scatter.smooth(sf$BrwnFlds_500 ~ sf$PoC)
scatter.smooth(sf$BrwnFlds_500 ~ sf$EJStress)
# Lagrange Multiplier Test for Spatial Lag and Spatial Error models
lm_tests <- lm.RStests(lm(model, data = sf), listw = weights, test = "all")
# # Fixed Distance Bands
# nb <- dnearneigh(coords, d1 = 0, d2 = 2000)  # Set d2 to a distance that covers gaps
# weights <- nb2listw(nb, style = "W")
#
# K-Nearest Neighbors
nb <- knn2nb(knearneigh(coords, k = 4))  # Adjust k for the number of neighbors
weights <- nb2listw(nb, style = "W")
# Lagrange Multiplier Test for Spatial Lag and Spatial Error models
lm_tests <- lm.RStests(lm(model, data = sf), listw = weights, test = "all")
print(lm_tests)
# Import brownfields dataset
brownfields <- st_read(dsn = "C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/Arc Project - Peter's Brownfield Paper/Default.gdb",
layer = "BrownfieldSites")
# Project both datasets in NAD 83 UTM Zone 18N (units are in meters)
brownfields <- st_transform(brownfields, crs = 26918)
joined_data <- st_transform(joined_data, crs = 26918)
# Reduce to just pref_id_num field and rename to ID
brownfields <- brownfields %>%
mutate(ID = pref_id_num) %>%
select(ID)
# 500
joined_within_distance <- st_join(
joined_data,
brownfields,
join = st_is_within_distance,
dist = 500, # Units are in meters following the projection
left = TRUE
)
# Count the number of unique IDs within 500 meters for each feature in joined_data
joined_data_with_counts <- joined_within_distance %>%
group_by(GEOID) %>%
summarise(BrwnFlds_500 = n_distinct(ID, na.rm = TRUE))
# Join the count result back to the original joined_data
final_joined_data <- left_join(joined_data, st_drop_geometry(joined_data_with_counts), by = "GEOID")
# 250
joined_within_distance <- st_join(
joined_data,
brownfields,
join = st_is_within_distance,
dist = 250, # Units are in meters following the projection
left = TRUE
)
# Count the number of unique IDs within 250 meters for each feature in joined_data
joined_data_with_counts <- joined_within_distance %>%
group_by(GEOID) %>%
summarise(BrwnFlds_250 = n_distinct(ID, na.rm = TRUE))
# Join the count result back to the original joined_data
final_joined_data <- left_join(final_joined_data, st_drop_geometry(joined_data_with_counts), by = "GEOID")
# 1000
joined_within_distance <- st_join(
joined_data,
brownfields,
join = st_is_within_distance,
dist = 1000, # Units are in meters following the projection
left = TRUE
)
# Count the number of unique IDs within 1000 meters for each feature in joined_data
joined_data_with_counts <- joined_within_distance %>%
group_by(GEOID) %>%
summarise(BrwnFlds_1k = n_distinct(ID, na.rm = TRUE))
# Join the count result back to the original joined_data
final_joined_data <- left_join(final_joined_data, st_drop_geometry(joined_data_with_counts), by = "GEOID")
# Drop empty geometries (fields with no geometry and no census data)
final_joined_data <- final_joined_data %>%
filter(!st_is_empty(geometry))
View(final_joined_data)
n_distinct(final_joined_data)
# Export the combined data as a shapefile
st_write(final_joined_data, "NJ_Brownfields_Census_EJStressors.shp")
## PREP THE DATA
# Import brownfields dataset
brownfields <- st_read(dsn = "C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/Arc Project - Peter's Brownfield Paper/Default.gdb",
layer = "BrownfieldSites")
# Project both datasets in NAD 83 UTM Zone 18N (units are in meters)
brownfields <- st_transform(brownfields, crs = 26918)
joined_data <- st_transform(joined_data, crs = 26918)
#st_crs(brownfields)
#st_crs(joined_data)
# Reduce to just pref_id_num field and rename to ID
brownfields <- brownfields %>%
mutate(ID = pref_id_num) %>%
select(ID)
## RUN THE SPATIAL JOIN(S)
# Spatial Join to joined_data from brownfields, within a distance
# These spatial joins create a new feature for every match, so when a Block Group has multiple
# brownfields within this distance, this creates multiple rows (one for each brownfield ID)
# 500
joined_within_distance <- st_join(
joined_data,
brownfields,
join = st_is_within_distance,
dist = 500, # Units are in meters following the projection
left = TRUE
)
# Count the number of unique IDs within 500 meters for each feature in joined_data
joined_data_with_counts <- joined_within_distance %>%
group_by(GEOID) %>%
summarise(BrwnFl_500 = n_distinct(ID, na.rm = TRUE))
# Join the count result back to the original joined_data
final_joined_data <- left_join(joined_data, st_drop_geometry(joined_data_with_counts), by = "GEOID")
# 250
joined_within_distance <- st_join(
joined_data,
brownfields,
join = st_is_within_distance,
dist = 250, # Units are in meters following the projection
left = TRUE
)
# Count the number of unique IDs within 250 meters for each feature in joined_data
joined_data_with_counts <- joined_within_distance %>%
group_by(GEOID) %>%
summarise(BrwnFl_250 = n_distinct(ID, na.rm = TRUE))
# Join the count result back to the original joined_data
final_joined_data <- left_join(final_joined_data, st_drop_geometry(joined_data_with_counts), by = "GEOID")
# 1000
joined_within_distance <- st_join(
joined_data,
brownfields,
join = st_is_within_distance,
dist = 1000, # Units are in meters following the projection
left = TRUE
)
# Count the number of unique IDs within 1000 meters for each feature in joined_data
joined_data_with_counts <- joined_within_distance %>%
group_by(GEOID) %>%
summarise(BrwnFl_1k = n_distinct(ID, na.rm = TRUE))
# Join the count result back to the original joined_data
final_joined_data <- left_join(final_joined_data, st_drop_geometry(joined_data_with_counts), by = "GEOID")
# Drop empty geometries (fields with no geometry and no census data)
final_joined_data <- final_joined_data %>%
filter(!st_is_empty(geometry))
################################################################################
### EXPORT SHAPEFILE
# Export the combined data as a shapefile
st_write(final_joined_data, "NJ_Brownfields_Census_EJStressors.shp")
# Import ej stressors dataset from personal geodatabase
ej_stressors_fc <- st_read(dsn = "C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/Arc Project - Peter's Brownfield Paper/Default.gdb",
layer = "EnvironmentalJusticeEJLawCombinedStressorSummary_UPDATED")
# Import brownfields dataset
brownfields_fc <- st_read(dsn = "C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/Arc Project - Peter's Brownfield Paper/Default.gdb",
layer = "BrownfieldSites")
# Create a copy
brownfields <- brownfields_fc
# Load necessary libraries
library(tidycensus)
library(tidyverse)
library(sf)
library(dplyr)
library(stringr)
library(ggplot2)
### SET UP
# Set Census API key (only needed once, then you can skip this)
census_api_key("a785070a2d252fd0d07b81912b3bb437cbed9ba2", install = TRUE)
# Check all Census API variables for each indicator to select which ones are needed
v22 <- load_variables(2022, "acs5", cache = TRUE)
hi <- v22 %>% filter(str_detect(name,"B27010")) # Health insurance
inc <- v22 %>% filter(str_detect(name, "B19013")) # Income
ed <- v22 %>% filter(str_detect(name, "B15003")) # Education
rc <- v22 %>% filter(str_detect(name, "B03002")) # Race
################################################################################
### PULL EACH GIS CENSUS FEATURES FROM API
## HEALTH INSURANCE
# Health Insurance: Total population without health insurance
no_health_insurance <- get_acs(
geography = "block group",
variables = c(none_under19 = "B27010_017",
none_19to34 = "B27010_033",
none_35to64 = "B27010_050",
none_65andover = "B27010_066"),
state = "NJ",
year = 2022,
survey = "acs5",
geometry = TRUE
) %>%  group_by(GEOID) %>%
summarize(total_no_health_insurance = sum(estimate))
# Health Insurance: Total population for whom health insurance status is determined
total_population_health_insurance <- get_acs(
geography = "block group",
variables = c(total = "B27010_001"),
state = "NJ",
year = 2022,
survey = "acs5",
geometry = FALSE
)
# Percentage of the population with insurance
health_insur_percentage <- no_health_insurance %>%
inner_join(total_population_health_insurance, by = "GEOID") %>%
mutate(insur_rate = (estimate - total_no_health_insurance) / estimate) %>%
select(GEOID, geometry, insur_rate)
## MEDIAN INCOME
# Median Household Income
median_income <- get_acs(
geography = "block group",
variables = c(med_income = "B19013_001"),
state = "NJ",
year = 2022,
survey = "acs5",
geometry = FALSE
) %>% select(GEOID, estimate)
incm_max <- max(median_income$estimate, na.rm = TRUE)
# STANDARDIZE BY MAX
median_income <- median_income %>%
group_by(GEOID) %>%
summarize(medn_incm = estimate/incm_max)  # INCOME IS MAX STANDARDIZED TO BE ON SAME SCALE AS OTHER VARS
## EDUCATION
# Population with Bachelor's Degree or Higher
bachelors_plus <- get_acs(
geography = "block group",
variables = c(bachelor = "B15003_022",
masters = "B15003_023",
prof = "B15003_024",
doctoral = "B15003_025"),
state = "NJ",
year = 2022,
survey = "acs5",
geometry = FALSE
) %>%
group_by(GEOID) %>%
summarize(bachelors_degree_or_higher = sum(estimate))
# Total population for bachelor's calculation
total_population_bachelors <- get_acs(
geography = "block group",
variables = c(total = "B15003_001"),
state = "NJ",
year = 2022,
survey = "acs5",
geometry = FALSE
)
# Percentage of the population with a bachelor's degree or higher
bachelors_plus_percentage <- bachelors_plus %>%
inner_join(total_population_bachelors, by = "GEOID") %>%
mutate(educ_rate = bachelors_degree_or_higher / estimate) %>%
select(GEOID, educ_rate)
## RACE
# Non-Hispanic White Population
non_hispanic_white <- get_acs(
geography = "block group",
variables = c(NonHspnc_White = "B03002_003"),
state = "NJ",
year = 2022,
survey = "acs5",
geometry = FALSE
)
# Total Population for Race/Ethnicity Calculation
total_population_race <- get_acs(
geography = "block group",
variables = c(total = "B03002_001"),
state = "NJ",
year = 2022,
survey = "acs5",
geometry = FALSE
)
# Calculate percentage of population that is NOT non-Hispanic White
non_white_percentage <- non_hispanic_white %>%
inner_join(total_population_race, by = "GEOID") %>%
mutate(PoC = (estimate.y - estimate.x) / estimate.y) %>%
select(GEOID, PoC)
################################################################################
### JOIN TOGETHER ALL CENSUS FEATURES AS ONE FEATURE CLASS
# Table join all together
census_data <- health_insur_percentage %>%
left_join(median_income, by = "GEOID") %>%
left_join(bachelors_plus_percentage, by = "GEOID") %>%
left_join(non_white_percentage, by = "GEOID")
# Project finale GIS feature into NAD 83 UTM Zone 18N (units are in meters)
census_data <- st_transform(census_data, crs = 26918)
# Load necessary libraries
library(tidycensus)
library(tidyverse)
library(sf)
library(dplyr)
library(stringr)
library(ggplot2)
# Table join all together
census_data <- health_insur_percentage %>%
left_join(median_income, by = "GEOID") %>%
left_join(bachelors_plus_percentage, by = "GEOID") %>%
left_join(non_white_percentage, by = "GEOID")
# Project finale GIS feature into NAD 83 UTM Zone 18N (units are in meters)
census_data <- st_transform(census_data, crs = 26918)
### JOIN THIS CENSUS FEATURE WITH THE EJ STRESSORS DATASET
# Import ej stressors dataset from personal geodatabase
ej_stressors_fc <- st_read(dsn = "C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/Arc Project - Peter's Brownfield Paper/Default.gdb",
layer = "EnvironmentalJusticeEJLawCombinedStressorSummary_UPDATED")
# Make a copy
ej_stressors <- ej_stressors_fc
# STANDARDIZE BY MAXIMUM
ejstrs_max <- max(ej_stressors$CST_BG, na.rm = TRUE) # CST_BG = Combined Stressor Total: Block Group Value (Sum Adverse High Stressors)
ej_stressors <- ej_stressors %>%
mutate(EJStress = CST_BG/ejstrs_max)  # THIS VARIABLE IS MAX STANDARDIZED TO BE ON SAME SCALE AS OTHER VARS
# Reduce that FeatureClass to just GEOID and EJStress
ej_stressors <- ej_stressors %>% select(GEOID, EJStress)
#Remove duplicates
ej_stressors <- ej_stressors %>%
distinct(GEOID, .keep_all = TRUE)
# Run a table join to merge the census feature class and EJ stressor feature class
joined_data <- census_data %>%
left_join(st_drop_geometry(ej_stressors), by = "GEOID") # Have to drop geometry to do a non-spatial join of sf objects
################################################################################
### SPATIAL JOIN THE FEATURE CLASS AND BROWNFIELDS BASED ON DISTANCE
## PREP THE DATA
# Import brownfields dataset
brownfields_fc <- st_read(dsn = "C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/Arc Project - Peter's Brownfield Paper/Default.gdb",
layer = "BrownfieldSites")
# Create a copy
brownfields <- brownfields_fc
# Project both datasets in NAD 83 UTM Zone 18N (units are in meters)
brownfields <- st_transform(brownfields, crs = 26918)
joined_data <- st_transform(joined_data, crs = 26918)
#st_crs(brownfields)
#st_crs(joined_data)
# Reduce to just pref_id_num field and rename to ID
brownfields <- brownfields %>%
mutate(ID = pref_id_num) %>%
select(ID)
## RUN THE SPATIAL JOIN(S)
# Spatial Join to joined_data from brownfields, within a distance
# These spatial joins create a new feature for every match, so when a Block Group has multiple
# brownfields within this distance, this creates multiple rows (one for each brownfield ID)
# 500 meter join
joined_within_distance <- st_join(
joined_data,
brownfields,
join = st_is_within_distance,
dist = 500, # Units are in meters following the projection
left = TRUE
)
# Count the number of unique IDs within 500 meters for each feature in joined_data
joined_data_with_counts <- joined_within_distance %>%
group_by(GEOID) %>%
summarise(BrwnFl_500 = n_distinct(ID, na.rm = TRUE))
# Join the count result back to the original joined_data
final_joined_data <- left_join(joined_data, st_drop_geometry(joined_data_with_counts), by = "GEOID")
# 250 meter join
joined_within_distance <- st_join(
joined_data,
brownfields,
join = st_is_within_distance,
dist = 250, # Units are in meters following the projection
left = TRUE
)
# Count the number of unique IDs within 250 meters for each feature in joined_data
joined_data_with_counts <- joined_within_distance %>%
group_by(GEOID) %>%
summarise(BrwnFl_250 = n_distinct(ID, na.rm = TRUE))
# Join the count result back to the original joined_data
final_joined_data <- left_join(final_joined_data, st_drop_geometry(joined_data_with_counts), by = "GEOID")
# 1000 meter join
joined_within_distance <- st_join(
joined_data,
brownfields,
join = st_is_within_distance,
dist = 1000, # Units are in meters following the projection
left = TRUE
)
# Count the number of unique IDs within 1000 meters for each feature in joined_data
joined_data_with_counts <- joined_within_distance %>%
group_by(GEOID) %>%
summarise(BrwnFl_1k = n_distinct(ID, na.rm = TRUE))
# Join the count result back to the original joined_data
final_joined_data <- left_join(final_joined_data, st_drop_geometry(joined_data_with_counts), by = "GEOID")
# Drop empty geometries (fields with no geometry and no census data)
final_joined_data <- final_joined_data %>%
filter(!st_is_empty(geometry))
# Load necessary libraries
library(spdep)
library(sf)
library(spatialreg)
# Import final dataset generated in tidycensus script
sf <- final_joined_data
# Project dataset in NAD 83 UTM Zone 18N (units are in meters)
sf <- st_transform(sf, 26918)
write.csv(sf)
write.csv(sf, file = C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/R Project - Peter's Brownfield Paper/sf.csv)
write.csv(sf, file = C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/R Project - Peter's Brownfield Paper/sf.csv)
write.csv(sf, file = "C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/R Project - Peter's Brownfield Paper/sf.csv")
write.csv(st_drop_geometry(sf), file = "C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/R Project - Peter's Brownfield Paper/sf.csv")
# Load necessary libraries
library(tidycensus)
library(tidyverse)
library(sf)
library(dplyr)
library(stringr)
library(ggplot2)
write.csv(st_drop_geometry(sf), file = "C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/R Project - Peter's Brownfield Paper/sf.csv")
write.csv(st_drop_geometry(final_joined_data), file = "C:/Users/cjkno/Documents/My Documents/Classes - '23 Spring/Research/Paper - Peter Brownfield Paper/R Project - Peter's Brownfield Paper/sf.csv")
